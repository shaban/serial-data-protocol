package cpp

import (
	"fmt"
	"strings"

	"github.com/shaban/serial-data-protocol/internal/parser"
)

// GenerateMessageEncodeHeader generates the message mode encode header file.
func GenerateMessageEncodeHeader(schema *parser.Schema, packageName string) string {
	var buf strings.Builder

	buf.WriteString("// Auto-generated by sdp-gen. DO NOT EDIT.\n")
	buf.WriteString("// Message mode encoders - self-describing messages with type headers.\n\n")
	buf.WriteString("#pragma once\n\n")
	buf.WriteString("#include \"types.hpp\"\n")
	buf.WriteString("#include \"encode.hpp\"\n")
	buf.WriteString("#include <cstdint>\n")
	buf.WriteString("#include <vector>\n")
	buf.WriteString("#include <array>\n")
	buf.WriteString("#include <cstring>\n\n")

	buf.WriteString("namespace sdp {\n\n")

	// Message constants
	buf.WriteString("// Message mode constants\n")
	buf.WriteString("constexpr size_t MESSAGE_HEADER_SIZE = 10;\n")
	buf.WriteString("constexpr char MESSAGE_MAGIC[3] = {'S', 'D', 'P'};\n")
	buf.WriteString("constexpr uint8_t MESSAGE_VERSION = '2';  // ASCII '2' for v0.2.0\n\n")

	// Generate encoder declarations for each struct
	for i, s := range schema.Structs {
		typeID := uint16(i + 1)
		structName := toPascalCase(s.Name)

		buf.WriteString("// Encode")
		buf.WriteString(structName)
		buf.WriteString("Message encodes ")
		buf.WriteString(structName)
		buf.WriteString(" to self-describing message format.\n")
		buf.WriteString("// Wire format: [SDP:3][version:1][type_id:2][length:4][payload:N]\n")
		buf.WriteString("// Type ID: ")
		buf.WriteString(fmt.Sprintf("%d\n", typeID))
		buf.WriteString("std::vector<uint8_t> Encode")
		buf.WriteString(structName)
		buf.WriteString("Message(const ")
		buf.WriteString(structName)
		buf.WriteString("& src);\n\n")
	}

	buf.WriteString("} // namespace sdp\n")

	return buf.String()
}

// GenerateMessageEncodeImpl generates the message mode encode implementation file.
func GenerateMessageEncodeImpl(schema *parser.Schema, packageName string) string {
	var buf strings.Builder

	buf.WriteString("// Auto-generated by sdp-gen. DO NOT EDIT.\n")
	buf.WriteString("// Message mode encoders - implementation.\n\n")
	buf.WriteString("#include \"message_encode.hpp\"\n")
	buf.WriteString("#include \"endian.hpp\"\n")
	buf.WriteString("#include <stdexcept>\n\n")

	buf.WriteString("namespace sdp {\n\n")

	// Generate encoder implementations for each struct
	for i, s := range schema.Structs {
		typeID := uint16(i + 1)
		structName := toPascalCase(s.Name)
		snakeName := toSnakeCase(s.Name)

		buf.WriteString("std::vector<uint8_t> Encode")
		buf.WriteString(structName)
		buf.WriteString("Message(const ")
		buf.WriteString(structName)
		buf.WriteString("& src) {\n")

		// Calculate payload size
		buf.WriteString("    // Calculate payload size\n")
		buf.WriteString("    size_t payloadSize = ")
		buf.WriteString(snakeName)
		buf.WriteString("_size(src);\n\n")

		// Allocate message buffer
		buf.WriteString("    // Allocate message buffer (header + payload)\n")
		buf.WriteString("    size_t messageSize = MESSAGE_HEADER_SIZE + payloadSize;\n")
		buf.WriteString("    std::vector<uint8_t> message(messageSize);\n")
		buf.WriteString("    uint8_t* buf = message.data();\n\n")

		// Write header
		buf.WriteString("    // Write header\n")
		buf.WriteString("    std::memcpy(buf, MESSAGE_MAGIC, 3);  // Magic bytes 'SDP'\n")
		buf.WriteString("    buf[3] = MESSAGE_VERSION;            // Protocol version '2'\n")
		buf.WriteString(fmt.Sprintf("    *(uint16_t*)(buf + 4) = SDP_HTOLE16(%d);  // Type ID\n", typeID))
		buf.WriteString("    *(uint32_t*)(buf + 6) = SDP_HTOLE32(static_cast<uint32_t>(payloadSize));  // Payload length\n\n")

		// Encode payload
		buf.WriteString("    // Encode payload\n")
		buf.WriteString("    ")
		buf.WriteString(snakeName)
		buf.WriteString("_encode(src, buf + MESSAGE_HEADER_SIZE);\n\n")

		buf.WriteString("    return message;\n")
		buf.WriteString("}\n\n")
	}

	buf.WriteString("} // namespace sdp\n")

	return buf.String()
}
