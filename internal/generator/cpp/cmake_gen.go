package cpp

import (
	"fmt"
	"strings"

	"github.com/shaban/serial-data-protocol/internal/parser"
)

// GenerateCMake generates CMakeLists.txt for building the C++ code
func GenerateCMake(schema *parser.Schema, packageName string) string {
	var b strings.Builder

	libName := toSnakeCase(packageName)

	b.WriteString(fmt.Sprintf(`# CMakeLists.txt for %s
# Generated by sdp-gen - DO NOT EDIT

cmake_minimum_required(VERSION 3.10)
project(%s CXX)

# Require C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -O3")

# Source files
set(SOURCES
    encode.cpp
    decode.cpp
)

# Headers
set(HEADERS
    types.hpp
    encode.hpp
    decode.hpp
    endian.hpp
)

# Create static library
add_library(%s STATIC ${SOURCES})

# Make headers available
target_include_directories(%s PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

# Installation
install(TARGETS %s
    ARCHIVE DESTINATION lib
)

install(FILES ${HEADERS}
    DESTINATION include/sdp
)
`, packageName, packageName, libName, libName, libName))

	return b.String()
}
