// Code generated by sdp-gen. DO NOT EDIT.
//
// This code uses unsafe Swift operations for performance (3x faster decoding).
// All memory accesses are bounds-checked once at function entry.
// Safe for use - the unsafe operations are verified by the code generator.

public enum SDPDecodeError: Error {
    case insufficientData
    case invalidUTF8
    case invalidBoolValue
}

extension AllPrimitives {
    /// Decode from byte array (unsafe optimized)
    public static func decode(from bytes: [UInt8]) throws -> Self {
        // Bounds check once upfront for performance
        guard !bytes.isEmpty else { throw SDPDecodeError.insufficientData }

        return try bytes.withUnsafeBytes { bufferPtr -> Self in
            guard let baseAddress = bufferPtr.baseAddress else {
                throw SDPDecodeError.insufficientData
            }
            let buffer = baseAddress.assumingMemoryBound(to: UInt8.self)
            let _bufferSize = bufferPtr.count
            var offset = 0

            guard offset < _bufferSize else { throw SDPDecodeError.insufficientData }
            let u8Field = buffer[offset]
            offset += 1
            guard offset + 2 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let u16FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let u16Field = UInt16(littleEndian: u16FieldPtr.load(as: UInt16.self))
            offset += 2
            guard offset + 4 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let u32FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let u32Field = UInt32(littleEndian: u32FieldPtr.load(as: UInt32.self))
            offset += 4
            guard offset + 8 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let u64FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let u64Field = UInt64(littleEndian: u64FieldPtr.load(as: UInt64.self))
            offset += 8
            guard offset < _bufferSize else { throw SDPDecodeError.insufficientData }
            let i8Field = Int8(bitPattern: buffer[offset])
            offset += 1
            guard offset + 2 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let i16FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let i16Field = Int16(bitPattern: UInt16(littleEndian: i16FieldPtr.load(as: UInt16.self)))
            offset += 2
            guard offset + 4 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let i32FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let i32Field = Int32(bitPattern: UInt32(littleEndian: i32FieldPtr.load(as: UInt32.self)))
            offset += 4
            guard offset + 8 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let i64FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let i64Field = Int64(bitPattern: UInt64(littleEndian: i64FieldPtr.load(as: UInt64.self)))
            offset += 8
            guard offset + 4 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let f32FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let f32FieldBits = UInt32(littleEndian: f32FieldPtr.load(as: UInt32.self))
            let f32Field = Float(bitPattern: f32FieldBits)
            offset += 4
            guard offset + 8 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let f64FieldPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let f64FieldBits = UInt64(littleEndian: f64FieldPtr.load(as: UInt64.self))
            let f64Field = Double(bitPattern: f64FieldBits)
            offset += 8
            guard offset < _bufferSize else { throw SDPDecodeError.insufficientData }
            let boolFieldByte = buffer[offset]
            guard boolFieldByte == 0 || boolFieldByte == 1 else { throw SDPDecodeError.invalidBoolValue }
            let boolField = boolFieldByte == 1
            offset += 1
            guard offset + 4 <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let strFieldLenPtr = UnsafeRawPointer(buffer.advanced(by: offset))
            let strFieldLen = Int(UInt32(littleEndian: strFieldLenPtr.load(as: UInt32.self)))
            offset += 4
            guard offset + strFieldLen <= _bufferSize else { throw SDPDecodeError.insufficientData }
            let strFieldBuffer = UnsafeBufferPointer(start: buffer.advanced(by: offset), count: strFieldLen)
            let strField = String(decoding: strFieldBuffer, as: UTF8.self)
            offset += strFieldLen

            return Self(
                u8Field: u8Field,
                u16Field: u16Field,
                u32Field: u32Field,
                u64Field: u64Field,
                i8Field: i8Field,
                i16Field: i16Field,
                i32Field: i32Field,
                i64Field: i64Field,
                f32Field: f32Field,
                f64Field: f64Field,
                boolField: boolField,
                strField: strField
            )
        }
    }
}

