// Code generated by sdp-gen. DO NOT EDIT.

import Foundation

extension AllPrimitives {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        data.append(self.u8Field)
        data.append(contentsOf: withUnsafeBytes(of: self.u16Field.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.u32Field.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.u64Field.littleEndian) { Data($0) })
        data.append(UInt8(bitPattern: self.i8Field))
        data.append(contentsOf: withUnsafeBytes(of: self.i16Field.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.i32Field.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.i64Field.littleEndian) { Data($0) })
        let f32FieldBits = self.f32Field.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: f32FieldBits) { Data($0) })
        let f64FieldBits = self.f64Field.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: f64FieldBits) { Data($0) })
        data.append(self.boolField ? 1 : 0)
        let strFieldData = self.strField.data(using: .utf8)!
        let strFieldLen = UInt32(strFieldData.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: strFieldLen) { Data($0) })
        data.append(strFieldData)
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 1
        size += 2
        size += 4
        size += 8
        size += 1
        size += 2
        size += 4
        size += 8
        size += 4
        size += 8
        size += 1
        size += 4 + self.strField.utf8.count
        return size
    }
}

