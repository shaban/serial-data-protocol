// Code generated by sdp-gen. DO NOT EDIT.

extension AllPrimitives {
    /// Encode to byte array
    public func encodeToBytes() -> [UInt8] {
        var bytes = [UInt8]()
        bytes.reserveCapacity(encodedSize())
        encode(to: &bytes)
        return bytes
    }

    /// Encode to a byte array buffer
    public func encode(to bytes: inout [UInt8]) {
        bytes.append(self.u8Field)
        withUnsafeBytes(of: self.u16Field.littleEndian) { bytes.append(contentsOf: $0) }
        withUnsafeBytes(of: self.u32Field.littleEndian) { bytes.append(contentsOf: $0) }
        withUnsafeBytes(of: self.u64Field.littleEndian) { bytes.append(contentsOf: $0) }
        bytes.append(UInt8(bitPattern: self.i8Field))
        withUnsafeBytes(of: self.i16Field.littleEndian) { bytes.append(contentsOf: $0) }
        withUnsafeBytes(of: self.i32Field.littleEndian) { bytes.append(contentsOf: $0) }
        withUnsafeBytes(of: self.i64Field.littleEndian) { bytes.append(contentsOf: $0) }
        let f32FieldBits = self.f32Field.bitPattern.littleEndian
        withUnsafeBytes(of: f32FieldBits) { bytes.append(contentsOf: $0) }
        let f64FieldBits = self.f64Field.bitPattern.littleEndian
        withUnsafeBytes(of: f64FieldBits) { bytes.append(contentsOf: $0) }
        bytes.append(self.boolField ? 1 : 0)
        let strFieldBytes = Array(self.strField.utf8)
        let strFieldLen = UInt32(strFieldBytes.count).littleEndian
        withUnsafeBytes(of: strFieldLen) { bytes.append(contentsOf: $0) }
        bytes.append(contentsOf: strFieldBytes)
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 1
        size += 2
        size += 4
        size += 8
        size += 1
        size += 2
        size += 4
        size += 8
        size += 4
        size += 8
        size += 1
        size += 4 + self.strField.utf8.count
        return size
    }
}

