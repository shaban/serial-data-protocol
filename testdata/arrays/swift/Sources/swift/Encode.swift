// Code generated by sdp-gen. DO NOT EDIT.

extension ArraysOfPrimitives {
    /// Encode to byte array
    public func encodeToBytes() -> [UInt8] {
        var bytes = [UInt8]()
        bytes.reserveCapacity(encodedSize())
        encode(to: &bytes)
        return bytes
    }

    /// Encode to a byte array buffer
    public func encode(to bytes: inout [UInt8]) {
        let u8ArrayLen = UInt32(self.u8Array.count).littleEndian
        withUnsafeBytes(of: u8ArrayLen) { bytes.append(contentsOf: $0) }
        for elem in self.u8Array {
            bytes.append(elem)
        }
        let u32ArrayLen = UInt32(self.u32Array.count).littleEndian
        withUnsafeBytes(of: u32ArrayLen) { bytes.append(contentsOf: $0) }
        for elem in self.u32Array {
            withUnsafeBytes(of: elem.littleEndian) { bytes.append(contentsOf: $0) }
        }
        let f64ArrayLen = UInt32(self.f64Array.count).littleEndian
        withUnsafeBytes(of: f64ArrayLen) { bytes.append(contentsOf: $0) }
        for elem in self.f64Array {
            let elemBits = elem.bitPattern.littleEndian
            withUnsafeBytes(of: elemBits) { bytes.append(contentsOf: $0) }
        }
        let strArrayLen = UInt32(self.strArray.count).littleEndian
        withUnsafeBytes(of: strArrayLen) { bytes.append(contentsOf: $0) }
        for elem in self.strArray {
            let elemBytes = Array(elem.utf8)
            let elemLen = UInt32(elemBytes.count).littleEndian
            withUnsafeBytes(of: elemLen) { bytes.append(contentsOf: $0) }
            bytes.append(contentsOf: elemBytes)
        }
        let boolArrayLen = UInt32(self.boolArray.count).littleEndian
        withUnsafeBytes(of: boolArrayLen) { bytes.append(contentsOf: $0) }
        for elem in self.boolArray {
            bytes.append(elem ? 1 : 0)
        }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4 // array length
        size += self.u8Array.count * 1
        size += 4 // array length
        size += self.u32Array.count * 4
        size += 4 // array length
        size += self.f64Array.count * 8
        size += 4 // array length
        for elem in self.strArray {
            size += 4 + elem.utf8.count
        }
        size += 4 // array length
        size += self.boolArray.count * 1
        return size
    }
}

extension Item {
    /// Encode to byte array
    public func encodeToBytes() -> [UInt8] {
        var bytes = [UInt8]()
        bytes.reserveCapacity(encodedSize())
        encode(to: &bytes)
        return bytes
    }

    /// Encode to a byte array buffer
    public func encode(to bytes: inout [UInt8]) {
        withUnsafeBytes(of: self.id.littleEndian) { bytes.append(contentsOf: $0) }
        let nameBytes = Array(self.name.utf8)
        let nameLen = UInt32(nameBytes.count).littleEndian
        withUnsafeBytes(of: nameLen) { bytes.append(contentsOf: $0) }
        bytes.append(contentsOf: nameBytes)
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += 4 + self.name.utf8.count
        return size
    }
}

extension ArraysOfStructs {
    /// Encode to byte array
    public func encodeToBytes() -> [UInt8] {
        var bytes = [UInt8]()
        bytes.reserveCapacity(encodedSize())
        encode(to: &bytes)
        return bytes
    }

    /// Encode to a byte array buffer
    public func encode(to bytes: inout [UInt8]) {
        let itemsLen = UInt32(self.items.count).littleEndian
        withUnsafeBytes(of: itemsLen) { bytes.append(contentsOf: $0) }
        for elem in self.items {
            elem.encode(to: &bytes)
        }
        withUnsafeBytes(of: self.count.littleEndian) { bytes.append(contentsOf: $0) }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4 // array length
        for elem in self.items {
            size += elem.encodedSize()
        }
        size += 4
        return size
    }
}

