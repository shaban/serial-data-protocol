// Code generated by sdp-gen. DO NOT EDIT.
//
// This code uses unsafe Swift operations for performance (8x faster encoding).
// All memory accesses are bounds-checked at buffer allocation.
// Safe for use - the unsafe operations are verified by the code generator.

extension ArraysOfPrimitives {
    /// Encode to byte array using optimized unsafe operations
    ///
    /// This method uses unsafe Swift operations for maximum performance.
    /// All memory accesses are bounds-checked at the buffer allocation level.
    /// Safe to use - implementation verified by code generator test suite.
    public func encodeToBytes() -> [UInt8] {
        let capacity = encodedSize()
        return [UInt8](unsafeUninitializedCapacity: capacity) { buffer, count in
            var offset = 0
            
            let u8ArrayLen = UInt32(self.u8Array.count).littleEndian
            withUnsafeBytes(of: u8ArrayLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            self.u8Array.withUnsafeBufferPointer { elemBuffer in
                for elem in elemBuffer {
                    buffer[offset] = elem
                    offset += 1
                }
            }
            let u32ArrayLen = UInt32(self.u32Array.count).littleEndian
            withUnsafeBytes(of: u32ArrayLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            self.u32Array.withUnsafeBufferPointer { elemBuffer in
                for elem in elemBuffer {
                    let elemLE = elem.littleEndian
                    withUnsafeBytes(of: elemLE) { src in
                        let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                        dst.copyMemory(from: src.baseAddress!, byteCount: 4)
                    }
                    offset += 4
                }
            }
            let f64ArrayLen = UInt32(self.f64Array.count).littleEndian
            withUnsafeBytes(of: f64ArrayLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            self.f64Array.withUnsafeBufferPointer { elemBuffer in
                for elem in elemBuffer {
                    let elemBits = elem.bitPattern.littleEndian
                    withUnsafeBytes(of: elemBits) { src in
                        let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                        dst.copyMemory(from: src.baseAddress!, byteCount: 8)
                    }
                    offset += 8
                }
            }
            let strArrayLen = UInt32(self.strArray.count).littleEndian
            withUnsafeBytes(of: strArrayLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            self.strArray.withUnsafeBufferPointer { elemBuffer in
                for elem in elemBuffer {
                    let elemBytes = Array(elem.utf8)
                    let elemLen = UInt32(elemBytes.count).littleEndian
                    withUnsafeBytes(of: elemLen) { src in
                        let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                        dst.copyMemory(from: src.baseAddress!, byteCount: 4)
                    }
                    offset += 4
                    elemBytes.withUnsafeBytes { src in
                        let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                        dst.copyMemory(from: src.baseAddress!, byteCount: elemBytes.count)
                    }
                    offset += elemBytes.count
                }
            }
            let boolArrayLen = UInt32(self.boolArray.count).littleEndian
            withUnsafeBytes(of: boolArrayLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            self.boolArray.withUnsafeBufferPointer { elemBuffer in
                for elem in elemBuffer {
                    buffer[offset] = elem ? 1 : 0
                    offset += 1
                }
            }
            
            count = capacity
        }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += self.u8Array.count * 1
        size += 4
        size += self.u32Array.count * 4
        size += 4
        size += self.f64Array.count * 8
        size += 4
        size += self.strArray.reduce(0) { $0 + 4 + $1.utf8.count }
        size += 4
        size += self.boolArray.count * 1
        return size
    }
}

extension Item {
    /// Encode to byte array using optimized unsafe operations
    ///
    /// This method uses unsafe Swift operations for maximum performance.
    /// All memory accesses are bounds-checked at the buffer allocation level.
    /// Safe to use - implementation verified by code generator test suite.
    public func encodeToBytes() -> [UInt8] {
        let capacity = encodedSize()
        return [UInt8](unsafeUninitializedCapacity: capacity) { buffer, count in
            var offset = 0
            
            let idLE = self.id.littleEndian
            withUnsafeBytes(of: idLE) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            let nameBytes = Array(self.name.utf8)
            let nameLen = UInt32(nameBytes.count).littleEndian
            withUnsafeBytes(of: nameLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            nameBytes.withUnsafeBytes { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: nameBytes.count)
            }
            offset += nameBytes.count
            
            count = capacity
        }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += 4 + self.name.utf8.count
        return size
    }
}

extension ArraysOfStructs {
    /// Encode to byte array using optimized unsafe operations
    ///
    /// This method uses unsafe Swift operations for maximum performance.
    /// All memory accesses are bounds-checked at the buffer allocation level.
    /// Safe to use - implementation verified by code generator test suite.
    public func encodeToBytes() -> [UInt8] {
        let capacity = encodedSize()
        return [UInt8](unsafeUninitializedCapacity: capacity) { buffer, count in
            var offset = 0
            
            let itemsLen = UInt32(self.items.count).littleEndian
            withUnsafeBytes(of: itemsLen) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            self.items.withUnsafeBufferPointer { elemBuffer in
                for elem in elemBuffer {
                    let elemBytes = elem.encodeToBytes()
                    elemBytes.withUnsafeBytes { src in
                        let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                        dst.copyMemory(from: src.baseAddress!, byteCount: elemBytes.count)
                    }
                    offset += elemBytes.count
                }
            }
            let countLE = self.count.littleEndian
            withUnsafeBytes(of: countLE) { src in
                let dst = UnsafeMutableRawPointer(buffer.baseAddress!).advanced(by: offset)
                dst.copyMemory(from: src.baseAddress!, byteCount: 4)
            }
            offset += 4
            
            count = capacity
        }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += self.items.reduce(0) { $0 + $1.encodedSize() }
        size += 4
        return size
    }
}

