/* decode.cpp - Decoding implementations for messagemode
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "decode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

/* Forward declarations for internal decode helpers */
static Point point_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);
static Rectangle rectangle_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);

static Point point_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Point result;

    /* x */
    if (offset + 8 > buf_len) throw DecodeError("Buffer too small");
    result.x = sdp_le_to_f64(*(const uint64_t*)(buf + offset));
    offset += 8;

    /* y */
    if (offset + 8 > buf_len) throw DecodeError("Buffer too small");
    result.y = sdp_le_to_f64(*(const uint64_t*)(buf + offset));
    offset += 8;

    return result;
}

Point point_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return point_decode_impl(buf, buf_len, offset);
}

static Rectangle rectangle_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Rectangle result;

    /* top_left */
    result.top_left = point_decode_impl(buf, buf_len, offset);

    /* width */
    if (offset + 8 > buf_len) throw DecodeError("Buffer too small");
    result.width = sdp_le_to_f64(*(const uint64_t*)(buf + offset));
    offset += 8;

    /* height */
    if (offset + 8 > buf_len) throw DecodeError("Buffer too small");
    result.height = sdp_le_to_f64(*(const uint64_t*)(buf + offset));
    offset += 8;

    return result;
}

Rectangle rectangle_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return rectangle_decode_impl(buf, buf_len, offset);
}

}  // namespace sdp
