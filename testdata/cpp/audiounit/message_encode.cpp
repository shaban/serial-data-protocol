// Auto-generated by sdp-gen. DO NOT EDIT.
// Message mode encoders - implementation.

#include "message_encode.hpp"
#include "endian.hpp"
#include <stdexcept>

namespace sdp {

std::vector<uint8_t> EncodeParameterMessage(const Parameter& src) {
    // Calculate payload size
    size_t payloadSize = parameter_size(src);

    // Allocate message buffer (header + payload)
    size_t messageSize = MESSAGE_HEADER_SIZE + payloadSize;
    std::vector<uint8_t> message(messageSize);
    uint8_t* buf = message.data();

    // Write header
    std::memcpy(buf, MESSAGE_MAGIC, 3);  // Magic bytes 'SDP'
    buf[3] = MESSAGE_VERSION;            // Protocol version '2'
    *(uint16_t*)(buf + 4) = SDP_HTOLE16(1);  // Type ID
    *(uint32_t*)(buf + 6) = SDP_HTOLE32(static_cast<uint32_t>(payloadSize));  // Payload length

    // Encode payload
    parameter_encode(src, buf + MESSAGE_HEADER_SIZE);

    return message;
}

std::vector<uint8_t> EncodePluginMessage(const Plugin& src) {
    // Calculate payload size
    size_t payloadSize = plugin_size(src);

    // Allocate message buffer (header + payload)
    size_t messageSize = MESSAGE_HEADER_SIZE + payloadSize;
    std::vector<uint8_t> message(messageSize);
    uint8_t* buf = message.data();

    // Write header
    std::memcpy(buf, MESSAGE_MAGIC, 3);  // Magic bytes 'SDP'
    buf[3] = MESSAGE_VERSION;            // Protocol version '2'
    *(uint16_t*)(buf + 4) = SDP_HTOLE16(2);  // Type ID
    *(uint32_t*)(buf + 6) = SDP_HTOLE32(static_cast<uint32_t>(payloadSize));  // Payload length

    // Encode payload
    plugin_encode(src, buf + MESSAGE_HEADER_SIZE);

    return message;
}

std::vector<uint8_t> EncodePluginRegistryMessage(const PluginRegistry& src) {
    // Calculate payload size
    size_t payloadSize = plugin_registry_size(src);

    // Allocate message buffer (header + payload)
    size_t messageSize = MESSAGE_HEADER_SIZE + payloadSize;
    std::vector<uint8_t> message(messageSize);
    uint8_t* buf = message.data();

    // Write header
    std::memcpy(buf, MESSAGE_MAGIC, 3);  // Magic bytes 'SDP'
    buf[3] = MESSAGE_VERSION;            // Protocol version '2'
    *(uint16_t*)(buf + 4) = SDP_HTOLE16(3);  // Type ID
    *(uint32_t*)(buf + 6) = SDP_HTOLE32(static_cast<uint32_t>(payloadSize));  // Payload length

    // Encode payload
    plugin_registry_encode(src, buf + MESSAGE_HEADER_SIZE);

    return message;
}

} // namespace sdp
