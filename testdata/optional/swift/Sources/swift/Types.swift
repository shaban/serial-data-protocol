// Generated by sdp-gen - DO NOT EDIT

/// Request Basic struct with optional metadata (RC Feature 1 test)
public struct Request {
    /// id Request ID (always present)
    public var id: UInt32
    /// metadata Optional user metadata
    public var metadata: Metadata?

    public init(id: UInt32, metadata: Metadata?) {
        self.id = id
        self.metadata = metadata
    }
}

/// Metadata User metadata
public struct Metadata {
    /// userId User ID
    public var userId: UInt64
    /// username Username
    public var username: String

    public init(userId: UInt64, username: String) {
        self.userId = userId
        self.username = username
    }
}

/// Config Complex example with nested optional fields
public struct Config {
    /// name Configuration name
    public var name: String
    /// database Optional database settings
    public var database: DatabaseConfig?
    /// cache Optional cache settings
    public var cache: CacheConfig?

    public init(name: String, database: DatabaseConfig?, cache: CacheConfig?) {
        self.name = name
        self.database = database
        self.cache = cache
    }
}

/// DatabaseConfig Database configuration
public struct DatabaseConfig {
    /// host Database host
    public var host: String
    /// port Database port
    public var port: UInt16

    public init(host: String, port: UInt16) {
        self.host = host
        self.port = port
    }
}

/// CacheConfig Cache configuration
public struct CacheConfig {
    /// sizeMb Cache size in MB
    public var sizeMb: UInt32
    /// ttlSeconds Time to live in seconds
    public var ttlSeconds: UInt32

    public init(sizeMb: UInt32, ttlSeconds: UInt32) {
        self.sizeMb = sizeMb
        self.ttlSeconds = ttlSeconds
    }
}

/// Document Example with optional array (wrapped struct containing array)
public struct Document {
    /// id Document ID
    public var id: UInt32
    /// tags Optional tags wrapper
    public var tags: TagList?

    public init(id: UInt32, tags: TagList?) {
        self.id = id
        self.tags = tags
    }
}

/// TagList Wrapper for tag array
public struct TagList {
    /// items Array of tags
    public var items: ContiguousArray<String>

    public init(items: ContiguousArray<String>) {
        self.items = items
    }
}
