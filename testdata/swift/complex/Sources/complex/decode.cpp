/* decode.cpp - Decoding implementations for complex
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "decode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

/* Array size limits */
constexpr uint32_t MAX_ARRAY_ELEMENTS = 1000000;
constexpr uint32_t MAX_TOTAL_ELEMENTS = 10000000;

/* Forward declarations for internal decode helpers */
static Parameter parameter_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);
static Plugin plugin_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);
static AudioDevice audio_device_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);

static Parameter parameter_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Parameter result;

    /* id */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.id = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* name */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t name_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + name_len > buf_len) throw DecodeError("Buffer too small");
    result.name = std::string(reinterpret_cast<const char*>(buf + offset), name_len);
    offset += name_len;

    /* value */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.value = sdp_le_to_f32(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* min */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.min = sdp_le_to_f32(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* max */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.max = sdp_le_to_f32(*(const uint32_t*)(buf + offset));
    offset += 4;

    return result;
}

Parameter parameter_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return parameter_decode_impl(buf, buf_len, offset);
}

static Plugin plugin_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Plugin result;
    uint32_t total_elements = 0;

    /* id */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.id = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* name */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t name_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + name_len > buf_len) throw DecodeError("Buffer too small");
    result.name = std::string(reinterpret_cast<const char*>(buf + offset), name_len);
    offset += name_len;

    /* manufacturer */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t manufacturer_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + manufacturer_len > buf_len) throw DecodeError("Buffer too small");
    result.manufacturer = std::string(reinterpret_cast<const char*>(buf + offset), manufacturer_len);
    offset += manufacturer_len;

    /* version */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.version = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* enabled */
    if (offset + 1 > buf_len) throw DecodeError("Buffer too small");
    result.enabled = buf[offset++] != 0;

    /* parameters */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t parameters_count = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (parameters_count > MAX_ARRAY_ELEMENTS) throw DecodeError("Array too large");
    total_elements += parameters_count;
    if (total_elements > MAX_TOTAL_ELEMENTS) throw DecodeError("Total elements too large");
    result.parameters.reserve(parameters_count);
    for (uint32_t i = 0; i < parameters_count; i++) {
        result.parameters.push_back(parameter_decode_impl(buf, buf_len, offset));
    }

    return result;
}

Plugin plugin_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return plugin_decode_impl(buf, buf_len, offset);
}

static AudioDevice audio_device_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    AudioDevice result;
    uint32_t total_elements = 0;

    /* device_id */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.device_id = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* device_name */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t device_name_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + device_name_len > buf_len) throw DecodeError("Buffer too small");
    result.device_name = std::string(reinterpret_cast<const char*>(buf + offset), device_name_len);
    offset += device_name_len;

    /* sample_rate */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.sample_rate = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* buffer_size */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.buffer_size = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* input_channels */
    if (offset + 2 > buf_len) throw DecodeError("Buffer too small");
    result.input_channels = SDP_LE16TOH(*(const uint16_t*)(buf + offset));
    offset += 2;

    /* output_channels */
    if (offset + 2 > buf_len) throw DecodeError("Buffer too small");
    result.output_channels = SDP_LE16TOH(*(const uint16_t*)(buf + offset));
    offset += 2;

    /* is_default */
    if (offset + 1 > buf_len) throw DecodeError("Buffer too small");
    result.is_default = buf[offset++] != 0;

    /* active_plugins */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t active_plugins_count = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (active_plugins_count > MAX_ARRAY_ELEMENTS) throw DecodeError("Array too large");
    total_elements += active_plugins_count;
    if (total_elements > MAX_TOTAL_ELEMENTS) throw DecodeError("Total elements too large");
    result.active_plugins.reserve(active_plugins_count);
    for (uint32_t i = 0; i < active_plugins_count; i++) {
        result.active_plugins.push_back(plugin_decode_impl(buf, buf_len, offset));
    }

    return result;
}

AudioDevice audio_device_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return audio_device_decode_impl(buf, buf_len, offset);
}

}  // namespace sdp
