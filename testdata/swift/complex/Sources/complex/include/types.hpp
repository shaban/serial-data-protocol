/* types.hpp - Type definitions for complex
 * Generated by sdp-gen - DO NOT EDIT
 * 
 * C++17 type definitions using:
 * - std::string for strings (null-terminated, length tracked)
 * - std::vector<T> for arrays (size tracked automatically)
 * - std::optional<T> for optional fields (type-safe)
 * 
 * Zero runtime dependencies, RAII memory management.
 */

#ifndef COMPLEX_TYPES_HPP
#define COMPLEX_TYPES_HPP

#include <cstdint>
#include <string>
#include <vector>
#include <optional>

namespace sdp {

/* Parameter */
struct Parameter {
    // id
    uint32_t id;
    // name
    std::string name;
    // value
    float value;
    // min
    float min;
    // max
    float max;
};

/* Plugin */
struct Plugin {
    // id
    uint32_t id;
    // name
    std::string name;
    // manufacturer
    std::string manufacturer;
    // version
    uint32_t version;
    // enabled
    bool enabled;
    // parameters
    std::vector<Parameter> parameters;
};

/* AudioDevice */
struct AudioDevice {
    // device_id
    uint32_t device_id;
    // device_name
    std::string device_name;
    // sample_rate
    uint32_t sample_rate;
    // buffer_size
    uint32_t buffer_size;
    // input_channels
    uint16_t input_channels;
    // output_channels
    uint16_t output_channels;
    // is_default
    bool is_default;
    // active_plugins
    std::vector<Plugin> active_plugins;
};

}  // namespace sdp

#endif  // COMPLEX_TYPES_HPP
