/* encode.cpp - Encoding implementations for primitives
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "encode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

size_t all_primitives_size(const AllPrimitives& msg) {
    size_t size = 0;
    size += 1;  // u8_field
    size += 2;  // u16_field
    size += 4;  // u32_field
    size += 8;  // u64_field
    size += 1;  // i8_field
    size += 2;  // i16_field
    size += 4;  // i32_field
    size += 8;  // i64_field
    size += 4;  // f32_field
    size += 8;  // f64_field
    size += 1;  // bool_field
    size += 4 + msg.str_field.size();  // str_field
    return size;
}

size_t all_primitives_encode(const AllPrimitives& msg, uint8_t* buf) {
    size_t offset = 0;

    /* u8_field */
        buf[offset++] = msg.u8_field;

    /* u16_field */
        *(uint16_t*)(buf + offset) = SDP_HTOLE16(msg.u16_field);
        offset += 2;

    /* u32_field */
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(msg.u32_field);
        offset += 4;

    /* u64_field */
        *(uint64_t*)(buf + offset) = SDP_HTOLE64(msg.u64_field);
        offset += 8;

    /* i8_field */
        buf[offset++] = msg.i8_field;

    /* i16_field */
        *(int16_t*)(buf + offset) = (int16_t)SDP_HTOLE16((uint16_t)msg.i16_field);
        offset += 2;

    /* i32_field */
        *(int32_t*)(buf + offset) = (int32_t)SDP_HTOLE32((uint32_t)msg.i32_field);
        offset += 4;

    /* i64_field */
        *(int64_t*)(buf + offset) = (int64_t)SDP_HTOLE64((uint64_t)msg.i64_field);
        offset += 8;

    /* f32_field */
        *(uint32_t*)(buf + offset) = sdp_f32_to_le(msg.f32_field);
        offset += 4;

    /* f64_field */
        *(uint64_t*)(buf + offset) = sdp_f64_to_le(msg.f64_field);
        offset += 8;

    /* bool_field */
        buf[offset++] = msg.bool_field;

    /* str_field */
    uint32_t str_field_len = msg.str_field.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(str_field_len);
    offset += 4;
    std::memcpy(buf + offset, msg.str_field.data(), str_field_len);
    offset += str_field_len;

    return offset;
}

}  // namespace sdp
