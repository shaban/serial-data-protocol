/* decode.hpp - Decoding functions for optional
 * Generated by sdp-gen - DO NOT EDIT
 */

#ifndef OPTIONAL_DECODE_HPP
#define OPTIONAL_DECODE_HPP

#include "types.hpp"
#include <cstdint>
#include <cstddef>
#include <stdexcept>

namespace sdp {

/* Decode error exception */
class DecodeError : public std::runtime_error {
public:
    explicit DecodeError(const char* msg) : std::runtime_error(msg) {}
};

/* Decode Request from buffer
 * Throws DecodeError on failure
 */
Request request_decode(const uint8_t* buf, size_t buf_len);

/* Decode Metadata from buffer
 * Throws DecodeError on failure
 */
Metadata metadata_decode(const uint8_t* buf, size_t buf_len);

/* Decode Config from buffer
 * Throws DecodeError on failure
 */
Config config_decode(const uint8_t* buf, size_t buf_len);

/* Decode DatabaseConfig from buffer
 * Throws DecodeError on failure
 */
DatabaseConfig database_config_decode(const uint8_t* buf, size_t buf_len);

/* Decode CacheConfig from buffer
 * Throws DecodeError on failure
 */
CacheConfig cache_config_decode(const uint8_t* buf, size_t buf_len);

/* Decode Document from buffer
 * Throws DecodeError on failure
 */
Document document_decode(const uint8_t* buf, size_t buf_len);

/* Decode TagList from buffer
 * Throws DecodeError on failure
 */
TagList tag_list_decode(const uint8_t* buf, size_t buf_len);

}  // namespace sdp

#endif  // OPTIONAL_DECODE_HPP
