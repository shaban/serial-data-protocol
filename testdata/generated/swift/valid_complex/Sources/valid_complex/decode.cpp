/* decode.cpp - Decoding implementations for valid_complex
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "decode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

/* Array size limits */
constexpr uint32_t MAX_ARRAY_ELEMENTS = 1000000;
constexpr uint32_t MAX_TOTAL_ELEMENTS = 10000000;

/* Forward declarations for internal decode helpers */
static DeviceList device_list_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);
static Device device_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);
static Parameter parameter_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);

static Parameter parameter_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Parameter result;

    /* name */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t name_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + name_len > buf_len) throw DecodeError("Buffer too small");
    result.name = std::string(reinterpret_cast<const char*>(buf + offset), name_len);
    offset += name_len;

    /* value */
    if (offset + 8 > buf_len) throw DecodeError("Buffer too small");
    result.value = sdp_le_to_f64(*(const uint64_t*)(buf + offset));
    offset += 8;

    return result;
}

Parameter parameter_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return parameter_decode_impl(buf, buf_len, offset);
}

static Device device_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Device result;
    uint32_t total_elements = 0;

    /* id */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.id = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* name */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t name_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + name_len > buf_len) throw DecodeError("Buffer too small");
    result.name = std::string(reinterpret_cast<const char*>(buf + offset), name_len);
    offset += name_len;

    /* parameters */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t parameters_count = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (parameters_count > MAX_ARRAY_ELEMENTS) throw DecodeError("Array too large");
    total_elements += parameters_count;
    if (total_elements > MAX_TOTAL_ELEMENTS) throw DecodeError("Total elements too large");
    result.parameters.reserve(parameters_count);
    for (uint32_t i = 0; i < parameters_count; i++) {
        result.parameters.push_back(parameter_decode_impl(buf, buf_len, offset));
    }

    return result;
}

Device device_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return device_decode_impl(buf, buf_len, offset);
}

static DeviceList device_list_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    DeviceList result;
    uint32_t total_elements = 0;

    /* devices */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t devices_count = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (devices_count > MAX_ARRAY_ELEMENTS) throw DecodeError("Array too large");
    total_elements += devices_count;
    if (total_elements > MAX_TOTAL_ELEMENTS) throw DecodeError("Total elements too large");
    result.devices.reserve(devices_count);
    for (uint32_t i = 0; i < devices_count; i++) {
        result.devices.push_back(device_decode_impl(buf, buf_len, offset));
    }

    return result;
}

DeviceList device_list_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return device_list_decode_impl(buf, buf_len, offset);
}

}  // namespace sdp
