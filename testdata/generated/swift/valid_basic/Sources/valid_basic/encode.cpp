/* encode.cpp - Encoding implementations for valid_basic
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "encode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

size_t device_size(const Device& msg) {
    size_t size = 0;
    size += 4;  // id
    size += 4 + msg.name.size();  // name
    return size;
}

size_t device_encode(const Device& msg, uint8_t* buf) {
    size_t offset = 0;

    /* id */
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(msg.id);
        offset += 4;

    /* name */
    uint32_t name_len = msg.name.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(name_len);
    offset += 4;
    std::memcpy(buf + offset, msg.name.data(), name_len);
    offset += name_len;

    return offset;
}

}  // namespace sdp
