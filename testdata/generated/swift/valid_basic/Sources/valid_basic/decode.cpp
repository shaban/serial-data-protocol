/* decode.cpp - Decoding implementations for valid_basic
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "decode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

/* Forward declarations for internal decode helpers */
static Device device_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset);

static Device device_decode_impl(const uint8_t* buf, size_t buf_len, size_t& offset) {
    Device result;

    /* id */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    result.id = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;

    /* name */
    if (offset + 4 > buf_len) throw DecodeError("Buffer too small");
    uint32_t name_len = SDP_LE32TOH(*(const uint32_t*)(buf + offset));
    offset += 4;
    if (offset + name_len > buf_len) throw DecodeError("Buffer too small");
    result.name = std::string(reinterpret_cast<const char*>(buf + offset), name_len);
    offset += name_len;

    return result;
}

Device device_decode(const uint8_t* buf, size_t buf_len) {
    size_t offset = 0;
    return device_decode_impl(buf, buf_len, offset);
}

}  // namespace sdp
