/* encode.cpp - Encoding implementations for message_test
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "encode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

size_t point_size(const Point& msg) {
    (void)msg;  // Fixed-size struct, parameter unused
    size_t size = 0;
    size += 8;  // x
    size += 8;  // y
    return size;
}

size_t point_encode(const Point& msg, uint8_t* buf) {
    size_t offset = 0;

    /* x */
        *(uint64_t*)(buf + offset) = sdp_f64_to_le(msg.x);
        offset += 8;

    /* y */
        *(uint64_t*)(buf + offset) = sdp_f64_to_le(msg.y);
        offset += 8;

    return offset;
}

size_t rectangle_size(const Rectangle& msg) {
    size_t size = 0;
    size += point_size(msg.top_left);  // top_left
    size += 8;  // width
    size += 8;  // height
    return size;
}

size_t rectangle_encode(const Rectangle& msg, uint8_t* buf) {
    size_t offset = 0;

    /* top_left */
    offset += point_encode(msg.top_left, buf + offset);

    /* width */
        *(uint64_t*)(buf + offset) = sdp_f64_to_le(msg.width);
        offset += 8;

    /* height */
        *(uint64_t*)(buf + offset) = sdp_f64_to_le(msg.height);
        offset += 8;

    return offset;
}

}  // namespace sdp
