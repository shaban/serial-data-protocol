/* encode.cpp - Encoding implementations for nested
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "encode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

size_t point_size(const Point& msg) {
    (void)msg;  // Fixed-size struct, parameter unused
    size_t size = 0;
    size += 4;  // x
    size += 4;  // y
    return size;
}

size_t point_encode(const Point& msg, uint8_t* buf) {
    size_t offset = 0;

    /* x */
        *(uint32_t*)(buf + offset) = sdp_f32_to_le(msg.x);
        offset += 4;

    /* y */
        *(uint32_t*)(buf + offset) = sdp_f32_to_le(msg.y);
        offset += 4;

    return offset;
}

size_t rectangle_size(const Rectangle& msg) {
    size_t size = 0;
    size += point_size(msg.top_left);  // top_left
    size += point_size(msg.bottom_right);  // bottom_right
    size += 4;  // color
    return size;
}

size_t rectangle_encode(const Rectangle& msg, uint8_t* buf) {
    size_t offset = 0;

    /* top_left */
    offset += point_encode(msg.top_left, buf + offset);

    /* bottom_right */
    offset += point_encode(msg.bottom_right, buf + offset);

    /* color */
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(msg.color);
        offset += 4;

    return offset;
}

size_t scene_size(const Scene& msg) {
    size_t size = 0;
    size += 4 + msg.name.size();  // name
    size += rectangle_size(msg.main_rect);  // main_rect
    size += 4;  // count
    return size;
}

size_t scene_encode(const Scene& msg, uint8_t* buf) {
    size_t offset = 0;

    /* name */
    uint32_t name_len = msg.name.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(name_len);
    offset += 4;
    std::memcpy(buf + offset, msg.name.data(), name_len);
    offset += name_len;

    /* main_rect */
    offset += rectangle_encode(msg.main_rect, buf + offset);

    /* count */
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(msg.count);
        offset += 4;

    return offset;
}

}  // namespace sdp
