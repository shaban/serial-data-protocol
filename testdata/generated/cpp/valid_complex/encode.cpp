/* encode.cpp - Encoding implementations for valid_complex
 * Generated by sdp-gen - DO NOT EDIT
 */

#include "encode.hpp"
#include "endian.hpp"
#include <cstring>

namespace sdp {

size_t device_list_size(const DeviceList& msg) {
    size_t size = 0;
    size += 4;  // devices count
    for (const auto& elem : msg.devices) {
        size += device_size(elem);
    }
    return size;
}

size_t device_list_encode(const DeviceList& msg, uint8_t* buf) {
    size_t offset = 0;

    /* devices */
    uint32_t devices_count = msg.devices.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(devices_count);
    offset += 4;
    for (const auto& elem : msg.devices) {
            *(uint32_t*)(buf + offset) = SDP_HTOLE32(elem.id);
            offset += 4;
        uint32_t name_len = elem.name.size();
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(name_len);
        offset += 4;
        std::memcpy(buf + offset, elem.name.data(), name_len);
        offset += name_len;
        uint32_t parameters_count = elem.parameters.size();
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(parameters_count);
        offset += 4;
        for (const auto& nested_elem : elem.parameters) {
            offset += parameter_encode(nested_elem, buf + offset);
        }
    }

    return offset;
}

size_t device_size(const Device& msg) {
    size_t size = 0;
    size += 4;  // id
    size += 4 + msg.name.size();  // name
    size += 4;  // parameters count
    for (const auto& elem : msg.parameters) {
        size += parameter_size(elem);
    }
    return size;
}

size_t device_encode(const Device& msg, uint8_t* buf) {
    size_t offset = 0;

    /* id */
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(msg.id);
        offset += 4;

    /* name */
    uint32_t name_len = msg.name.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(name_len);
    offset += 4;
    std::memcpy(buf + offset, msg.name.data(), name_len);
    offset += name_len;

    /* parameters */
    uint32_t parameters_count = msg.parameters.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(parameters_count);
    offset += 4;
    for (const auto& elem : msg.parameters) {
        uint32_t name_len = elem.name.size();
        *(uint32_t*)(buf + offset) = SDP_HTOLE32(name_len);
        offset += 4;
        std::memcpy(buf + offset, elem.name.data(), name_len);
        offset += name_len;
            *(uint64_t*)(buf + offset) = sdp_f64_to_le(elem.value);
            offset += 8;
    }

    return offset;
}

size_t parameter_size(const Parameter& msg) {
    size_t size = 0;
    size += 4 + msg.name.size();  // name
    size += 8;  // value
    return size;
}

size_t parameter_encode(const Parameter& msg, uint8_t* buf) {
    size_t offset = 0;

    /* name */
    uint32_t name_len = msg.name.size();
    *(uint32_t*)(buf + offset) = SDP_HTOLE32(name_len);
    offset += 4;
    std::memcpy(buf + offset, msg.name.data(), name_len);
    offset += name_len;

    /* value */
        *(uint64_t*)(buf + offset) = sdp_f64_to_le(msg.value);
        offset += 8;

    return offset;
}

}  // namespace sdp
