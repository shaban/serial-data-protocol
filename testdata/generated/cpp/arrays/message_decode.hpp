// Auto-generated by sdp-gen. DO NOT EDIT.
// Message mode decoders - self-describing messages with type headers.

#pragma once

#include "types.hpp"
#include "decode.hpp"
#include <cstdint>
#include <vector>
#include <variant>
#include <stdexcept>

namespace sdp {

// Message mode error types
class MessageDecodeError : public std::runtime_error {
public:
    explicit MessageDecodeError(const std::string& msg) : std::runtime_error(msg) {}
};

// DecodeArraysOfPrimitivesMessage decodes ArraysOfPrimitives from self-describing message format.
// Wire format: [SDP:3][version:1][type_id:2][length:4][payload:N]
// Expected Type ID: 1
// Throws MessageDecodeError if header is invalid.
ArraysOfPrimitives DecodeArraysOfPrimitivesMessage(const std::vector<uint8_t>& data);

// DecodeItemMessage decodes Item from self-describing message format.
// Wire format: [SDP:3][version:1][type_id:2][length:4][payload:N]
// Expected Type ID: 2
// Throws MessageDecodeError if header is invalid.
Item DecodeItemMessage(const std::vector<uint8_t>& data);

// DecodeArraysOfStructsMessage decodes ArraysOfStructs from self-describing message format.
// Wire format: [SDP:3][version:1][type_id:2][length:4][payload:N]
// Expected Type ID: 3
// Throws MessageDecodeError if header is invalid.
ArraysOfStructs DecodeArraysOfStructsMessage(const std::vector<uint8_t>& data);

// MessageVariant holds any decoded message type
using MessageVariant = std::variant<
    ArraysOfPrimitives,
    Item,
    ArraysOfStructs
>;

// DecodeMessage decodes a message and returns the struct type based on type ID.
// This is the main entry point for decoding self-describing messages.
// Throws MessageDecodeError if header is invalid or type ID is unknown.
MessageVariant DecodeMessage(const std::vector<uint8_t>& data);

} // namespace sdp
