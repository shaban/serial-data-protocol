/* encode.hpp - Encoding functions for optional
 * Generated by sdp-gen - DO NOT EDIT
 */

#ifndef OPTIONAL_ENCODE_HPP
#define OPTIONAL_ENCODE_HPP

#include "types.hpp"
#include <cstdint>
#include <cstddef>

namespace sdp {

/* Calculate encoded size of Request */
size_t request_size(const Request& msg);

/* Encode Request to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least request_size() bytes
 */
size_t request_encode(const Request& msg, uint8_t* buf);

/* Calculate encoded size of Metadata */
size_t metadata_size(const Metadata& msg);

/* Encode Metadata to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least metadata_size() bytes
 */
size_t metadata_encode(const Metadata& msg, uint8_t* buf);

/* Calculate encoded size of Config */
size_t config_size(const Config& msg);

/* Encode Config to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least config_size() bytes
 */
size_t config_encode(const Config& msg, uint8_t* buf);

/* Calculate encoded size of DatabaseConfig */
size_t database_config_size(const DatabaseConfig& msg);

/* Encode DatabaseConfig to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least database_config_size() bytes
 */
size_t database_config_encode(const DatabaseConfig& msg, uint8_t* buf);

/* Calculate encoded size of CacheConfig */
size_t cache_config_size(const CacheConfig& msg);

/* Encode CacheConfig to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least cache_config_size() bytes
 */
size_t cache_config_encode(const CacheConfig& msg, uint8_t* buf);

/* Calculate encoded size of Document */
size_t document_size(const Document& msg);

/* Encode Document to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least document_size() bytes
 */
size_t document_encode(const Document& msg, uint8_t* buf);

/* Calculate encoded size of TagList */
size_t tag_list_size(const TagList& msg);

/* Encode TagList to buffer
 * Returns: Number of bytes written
 * Note: Buffer must be at least tag_list_size() bytes
 */
size_t tag_list_encode(const TagList& msg, uint8_t* buf);

}  // namespace sdp

#endif  // OPTIONAL_ENCODE_HPP
