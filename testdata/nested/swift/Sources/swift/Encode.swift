// Code generated by sdp-gen. DO NOT EDIT.

import Foundation

extension Point {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        let xBits = self.x.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: xBits) { Data($0) })
        let yBits = self.y.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: yBits) { Data($0) })
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += 4
        return size
    }
}

extension Rectangle {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        try self.topLeft.encode(to: &data)
        try self.bottomRight.encode(to: &data)
        data.append(contentsOf: withUnsafeBytes(of: self.color.littleEndian) { Data($0) })
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += self.topLeft.encodedSize()
        size += self.bottomRight.encodedSize()
        size += 4
        return size
    }
}

extension Scene {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        let nameData = self.name.data(using: .utf8)!
        let nameLen = UInt32(nameData.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: nameLen) { Data($0) })
        data.append(nameData)
        try self.mainRect.encode(to: &data)
        data.append(contentsOf: withUnsafeBytes(of: self.count.littleEndian) { Data($0) })
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4 + self.name.utf8.count
        size += self.mainRect.encodedSize()
        size += 4
        return size
    }
}

