// Code generated by sdp-gen. DO NOT EDIT.

import Foundation

extension Parameter {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        data.append(contentsOf: withUnsafeBytes(of: self.id.littleEndian) { Data($0) })
        let nameData = self.name.data(using: .utf8)!
        let nameLen = UInt32(nameData.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: nameLen) { Data($0) })
        data.append(nameData)
        let valueBits = self.value.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: valueBits) { Data($0) })
        let minBits = self.min.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: minBits) { Data($0) })
        let maxBits = self.max.bitPattern.littleEndian
        data.append(contentsOf: withUnsafeBytes(of: maxBits) { Data($0) })
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += 4 + self.name.utf8.count
        size += 4
        size += 4
        size += 4
        return size
    }
}

extension Plugin {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        data.append(contentsOf: withUnsafeBytes(of: self.id.littleEndian) { Data($0) })
        let nameData = self.name.data(using: .utf8)!
        let nameLen = UInt32(nameData.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: nameLen) { Data($0) })
        data.append(nameData)
        let manufacturerData = self.manufacturer.data(using: .utf8)!
        let manufacturerLen = UInt32(manufacturerData.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: manufacturerLen) { Data($0) })
        data.append(manufacturerData)
        data.append(contentsOf: withUnsafeBytes(of: self.version.littleEndian) { Data($0) })
        data.append(self.enabled ? 1 : 0)
        let parametersLen = UInt32(self.parameters.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: parametersLen) { Data($0) })
        for elem in self.parameters {
            try elem.encode(to: &data)
        }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += 4 + self.name.utf8.count
        size += 4 + self.manufacturer.utf8.count
        size += 4
        size += 1
        size += 4 // array length
        for elem in self.parameters {
            size += elem.encodedSize()
        }
        return size
    }
}

extension AudioDevice {
    /// Encode to Data (IPC mode)
    public func encodeToData() throws -> Data {
        var data = Data(capacity: encodedSize())
        try encode(to: &data)
        return data
    }

    /// Encode to a Data buffer
    public func encode(to data: inout Data) throws {
        data.append(contentsOf: withUnsafeBytes(of: self.deviceId.littleEndian) { Data($0) })
        let deviceNameData = self.deviceName.data(using: .utf8)!
        let deviceNameLen = UInt32(deviceNameData.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: deviceNameLen) { Data($0) })
        data.append(deviceNameData)
        data.append(contentsOf: withUnsafeBytes(of: self.sampleRate.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.bufferSize.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.inputChannels.littleEndian) { Data($0) })
        data.append(contentsOf: withUnsafeBytes(of: self.outputChannels.littleEndian) { Data($0) })
        data.append(self.isDefault ? 1 : 0)
        let activePluginsLen = UInt32(self.activePlugins.count).littleEndian
        data.append(contentsOf: withUnsafeBytes(of: activePluginsLen) { Data($0) })
        for elem in self.activePlugins {
            try elem.encode(to: &data)
        }
    }

    /// Calculate the encoded size in bytes
    public func encodedSize() -> Int {
        var size = 0
        size += 4
        size += 4 + self.deviceName.utf8.count
        size += 4
        size += 4
        size += 2
        size += 2
        size += 1
        size += 4 // array length
        for elem in self.activePlugins {
            size += elem.encodedSize()
        }
        return size
    }
}

