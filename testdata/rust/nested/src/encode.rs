// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl Point {
    /// Encode to a byte slice (IPC mode - fast path)
    /// Returns the number of bytes written
    pub fn encode_to_slice(&self, buf: &mut [u8]) -> Result<usize> {
        let mut offset = 0;

        wire_slice::encode_f32(buf, offset, self.x)?;
        offset += 4;
        wire_slice::encode_f32(buf, offset, self.y)?;
        offset += 4;

        Ok(offset)
    }

    /// Calculate the exact size needed for encoding
    pub fn encoded_size(&self) -> usize {
        let mut size = 0;

        size += 4; // f32
        size += 4; // f32

        size
    }
}

impl Rectangle {
    /// Encode to a byte slice (IPC mode - fast path)
    /// Returns the number of bytes written
    pub fn encode_to_slice(&self, buf: &mut [u8]) -> Result<usize> {
        let mut offset = 0;

        let written = self.top_left.encode_to_slice(&mut buf[offset..])?;
        offset += written;
        let written = self.bottom_right.encode_to_slice(&mut buf[offset..])?;
        offset += written;
        wire_slice::encode_u32(buf, offset, self.color)?;
        offset += 4;

        Ok(offset)
    }

    /// Calculate the exact size needed for encoding
    pub fn encoded_size(&self) -> usize {
        let mut size = 0;

        size += self.top_left.encoded_size();
        size += self.bottom_right.encoded_size();
        size += 4; // u32

        size
    }
}

impl Scene {
    /// Encode to a byte slice (IPC mode - fast path)
    /// Returns the number of bytes written
    pub fn encode_to_slice(&self, buf: &mut [u8]) -> Result<usize> {
        let mut offset = 0;

        let written = wire_slice::encode_string(buf, offset, &self.name)?;
        offset += written;
        let written = self.main_rect.encode_to_slice(&mut buf[offset..])?;
        offset += written;
        wire_slice::encode_u32(buf, offset, self.count)?;
        offset += 4;

        Ok(offset)
    }

    /// Calculate the exact size needed for encoding
    pub fn encoded_size(&self) -> usize {
        let mut size = 0;

        size += 4 + self.name.len(); // length + bytes
        size += self.main_rect.encoded_size();
        size += 4; // u32

        size
    }
}

