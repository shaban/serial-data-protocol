// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl Point {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let x = wire_slice::decode_f32(buf, offset)?;
        offset += 4;
        let y = wire_slice::decode_f32(buf, offset)?;
        offset += 4;

        Ok(Self {
            x,
            y,
        })
    }
}

impl Rectangle {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let top_left = Point::decode_from_slice(&buf[offset..])?;
        offset += top_left.encoded_size();
        let bottom_right = Point::decode_from_slice(&buf[offset..])?;
        offset += bottom_right.encoded_size();
        let color = wire_slice::decode_u32(buf, offset)?;
        offset += 4;

        Ok(Self {
            top_left,
            bottom_right,
            color,
        })
    }
}

impl Scene {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let (name, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;
        let main_rect = Rectangle::decode_from_slice(&buf[offset..])?;
        offset += main_rect.encoded_size();
        let count = wire_slice::decode_u32(buf, offset)?;
        offset += 4;

        Ok(Self {
            name,
            main_rect,
            count,
        })
    }
}

