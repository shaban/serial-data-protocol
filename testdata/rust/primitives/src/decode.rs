// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl AllPrimitives {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let u8_field = wire_slice::decode_u8(buf, offset)?;
        offset += 1;
        let u16_field = wire_slice::decode_u16(buf, offset)?;
        offset += 2;
        let u32_field = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let u64_field = wire_slice::decode_u64(buf, offset)?;
        offset += 8;
        let i8_field = wire_slice::decode_i8(buf, offset)?;
        offset += 1;
        let i16_field = wire_slice::decode_i16(buf, offset)?;
        offset += 2;
        let i32_field = wire_slice::decode_i32(buf, offset)?;
        offset += 4;
        let i64_field = wire_slice::decode_i64(buf, offset)?;
        offset += 8;
        let f32_field = wire_slice::decode_f32(buf, offset)?;
        offset += 4;
        let f64_field = wire_slice::decode_f64(buf, offset)?;
        offset += 8;
        let bool_field = wire_slice::decode_bool(buf, offset)?;
        offset += 1;
        let (str_field, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;

        Ok(Self {
            u8_field,
            u16_field,
            u32_field,
            u64_field,
            i8_field,
            i16_field,
            i32_field,
            i64_field,
            f32_field,
            f64_field,
            bool_field,
            str_field,
        })
    }
}

