// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl AllPrimitives {
    /// Encode to a byte slice (IPC mode - fast path)
    /// Returns the number of bytes written
    pub fn encode_to_slice(&self, buf: &mut [u8]) -> Result<usize> {
        let mut offset = 0;

        wire_slice::encode_u8(buf, offset, self.u8_field)?;
        offset += 1;
        wire_slice::encode_u16(buf, offset, self.u16_field)?;
        offset += 2;
        wire_slice::encode_u32(buf, offset, self.u32_field)?;
        offset += 4;
        wire_slice::encode_u64(buf, offset, self.u64_field)?;
        offset += 8;
        wire_slice::encode_i8(buf, offset, self.i8_field)?;
        offset += 1;
        wire_slice::encode_i16(buf, offset, self.i16_field)?;
        offset += 2;
        wire_slice::encode_i32(buf, offset, self.i32_field)?;
        offset += 4;
        wire_slice::encode_i64(buf, offset, self.i64_field)?;
        offset += 8;
        wire_slice::encode_f32(buf, offset, self.f32_field)?;
        offset += 4;
        wire_slice::encode_f64(buf, offset, self.f64_field)?;
        offset += 8;
        wire_slice::encode_bool(buf, offset, self.bool_field)?;
        offset += 1;
        let written = wire_slice::encode_string(buf, offset, &self.str_field)?;
        offset += written;

        Ok(offset)
    }

    /// Calculate the exact size needed for encoding
    pub fn encoded_size(&self) -> usize {
        let mut size = 0;

        size += 1; // u8
        size += 2; // u16
        size += 4; // u32
        size += 8; // u64
        size += 1; // i8
        size += 2; // i16
        size += 4; // i32
        size += 8; // i64
        size += 4; // f32
        size += 8; // f64
        size += 1; // bool
        size += 4 + self.str_field.len(); // length + bytes

        size
    }
}

