// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use sdp::wire::{Decoder, Result};
use std::io::Read;

impl DeviceList {
    pub fn decode<R: Read>(reader: &mut R) -> Result<Self> {
        let mut dec = Decoder::new(reader);
        let len = dec.read_u32()?;
        let mut devices = Vec::with_capacity(len as usize);
        for _ in 0..len {
            let item = Device::decode(&mut dec.reader)?;
            devices.push(item);
        }
        Ok(Self {
            devices,
        })
    }
}

impl Device {
    pub fn decode<R: Read>(reader: &mut R) -> Result<Self> {
        let mut dec = Decoder::new(reader);
        let id = dec.read_u32()?;
        let name = dec.read_string()?;
        let len = dec.read_u32()?;
        let mut parameters = Vec::with_capacity(len as usize);
        for _ in 0..len {
            let item = Parameter::decode(&mut dec.reader)?;
            parameters.push(item);
        }
        Ok(Self {
            id,
            name,
            parameters,
        })
    }
}

impl Parameter {
    pub fn decode<R: Read>(reader: &mut R) -> Result<Self> {
        let mut dec = Decoder::new(reader);
        let name = dec.read_string()?;
        let value = dec.read_f64()?;
        Ok(Self {
            name,
            value,
        })
    }
}

