// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl Point {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let x = wire_slice::decode_f64(buf, offset)?;
        offset += 8;
        let y = wire_slice::decode_f64(buf, offset)?;
        offset += 8;

        Ok(Self {
            x,
            y,
        })
    }
}

impl Rectangle {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let top_left = Point::decode_from_slice(&buf[offset..])?;
        offset += top_left.encoded_size();
        let width = wire_slice::decode_f64(buf, offset)?;
        offset += 8;
        let height = wire_slice::decode_f64(buf, offset)?;
        offset += 8;

        Ok(Self {
            top_left,
            width,
            height,
        })
    }
}

