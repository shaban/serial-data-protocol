// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl Point {
    /// Encode to a byte slice (IPC mode - fast path)
    /// Returns the number of bytes written
    pub fn encode_to_slice(&self, buf: &mut [u8]) -> Result<usize> {
        let mut offset = 0;

        wire_slice::encode_f64(buf, offset, self.x)?;
        offset += 8;
        wire_slice::encode_f64(buf, offset, self.y)?;
        offset += 8;

        Ok(offset)
    }

    /// Calculate the exact size needed for encoding
    pub fn encoded_size(&self) -> usize {
        let mut size = 0;

        size += 8; // f64
        size += 8; // f64

        size
    }
}

impl Rectangle {
    /// Encode to a byte slice (IPC mode - fast path)
    /// Returns the number of bytes written
    pub fn encode_to_slice(&self, buf: &mut [u8]) -> Result<usize> {
        let mut offset = 0;

        let written = self.top_left.encode_to_slice(&mut buf[offset..])?;
        offset += written;
        wire_slice::encode_f64(buf, offset, self.width)?;
        offset += 8;
        wire_slice::encode_f64(buf, offset, self.height)?;
        offset += 8;

        Ok(offset)
    }

    /// Calculate the exact size needed for encoding
    pub fn encoded_size(&self) -> usize {
        let mut size = 0;

        size += self.top_left.encoded_size();
        size += 8; // f64
        size += 8; // f64

        size
    }
}

