// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl Parameter {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let id = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let (name, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;
        let value = wire_slice::decode_f32(buf, offset)?;
        offset += 4;
        let min = wire_slice::decode_f32(buf, offset)?;
        offset += 4;
        let max = wire_slice::decode_f32(buf, offset)?;
        offset += 4;

        Ok(Self {
            id,
            name,
            value,
            min,
            max,
        })
    }
}

impl Plugin {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let id = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let (name, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;
        let (manufacturer, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;
        let version = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let enabled = wire_slice::decode_bool(buf, offset)?;
        offset += 1;
        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut parameters = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = Parameter::decode_from_slice(&buf[offset..])?;
            offset += item.encoded_size();
            parameters.push(item);
        }

        Ok(Self {
            id,
            name,
            manufacturer,
            version,
            enabled,
            parameters,
        })
    }
}

impl AudioDevice {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let device_id = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let (device_name, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;
        let sample_rate = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let buffer_size = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let input_channels = wire_slice::decode_u16(buf, offset)?;
        offset += 2;
        let output_channels = wire_slice::decode_u16(buf, offset)?;
        offset += 2;
        let is_default = wire_slice::decode_bool(buf, offset)?;
        offset += 1;
        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut active_plugins = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = Plugin::decode_from_slice(&buf[offset..])?;
            offset += item.encoded_size();
            active_plugins.push(item);
        }

        Ok(Self {
            device_id,
            device_name,
            sample_rate,
            buffer_size,
            input_channels,
            output_channels,
            is_default,
            active_plugins,
        })
    }
}

