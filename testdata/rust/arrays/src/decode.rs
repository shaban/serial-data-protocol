// Code generated by sdp-gen. DO NOT EDIT.

use super::types::*;
use super::wire_slice::{self, SliceResult as Result};

impl ArraysOfPrimitives {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut u8_array = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = wire_slice::decode_u8(buf, offset)?;
            offset += 1;
            u8_array.push(item);
        }
        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut u32_array = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = wire_slice::decode_u32(buf, offset)?;
            offset += 4;
            u32_array.push(item);
        }
        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut f64_array = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = wire_slice::decode_f64(buf, offset)?;
            offset += 8;
            f64_array.push(item);
        }
        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut str_array = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let (item, consumed) = wire_slice::decode_string(buf, offset)?;
            offset += consumed;
            str_array.push(item);
        }
        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut bool_array = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = wire_slice::decode_bool(buf, offset)?;
            offset += 1;
            bool_array.push(item);
        }

        Ok(Self {
            u8_array,
            u32_array,
            f64_array,
            str_array,
            bool_array,
        })
    }
}

impl Item {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let id = wire_slice::decode_u32(buf, offset)?;
        offset += 4;
        let (name, consumed) = wire_slice::decode_string(buf, offset)?;
        offset += consumed;

        Ok(Self {
            id,
            name,
        })
    }
}

impl ArraysOfStructs {
    /// Decode from a byte slice (IPC mode - fast path)
    pub fn decode_from_slice(buf: &[u8]) -> Result<Self> {
        let mut offset = 0;

        let array_len = wire_slice::decode_u32(buf, offset)? as usize;
        offset += 4;
        let mut items = Vec::with_capacity(array_len);
        for _ in 0..array_len {
            let item = Item::decode_from_slice(&buf[offset..])?;
            offset += item.encoded_size();
            items.push(item);
        }
        let count = wire_slice::decode_u32(buf, offset)?;
        offset += 4;

        Ok(Self {
            items,
            count,
        })
    }
}

